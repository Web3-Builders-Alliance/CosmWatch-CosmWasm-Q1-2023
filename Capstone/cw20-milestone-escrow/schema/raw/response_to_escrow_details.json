{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "EscrowDetailsResponse",
  "type": "object",
  "required": [
    "arbiter",
    "cw20_balance",
    "cw20_whitelist",
    "description",
    "id",
    "milestones",
    "native_balance",
    "source",
    "title"
  ],
  "properties": {
    "arbiter": {
      "description": "arbiter can decide to approve or refund the escrow",
      "type": "string"
    },
    "cw20_balance": {
      "description": "Balance in cw20 tokens",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Cw20Coin"
      }
    },
    "cw20_whitelist": {
      "description": "Whitelisted cw20 tokens",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "description": {
      "description": "Longer description of the escrow, e.g. what conditions should be met",
      "type": "string"
    },
    "end_height": {
      "description": "When end height set and block height exceeds this value, the escrow is expired. Once an escrow is expired, it can be returned to the original funder (via \"refund\").",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint64",
      "minimum": 0.0
    },
    "end_time": {
      "description": "When end time (in seconds since epoch 00:00:00 UTC on 1 January 1970) is set and block time exceeds this value, the escrow is expired. Once an escrow is expired, it can be returned to the original funder (via \"refund\").",
      "type": [
        "integer",
        "null"
      ],
      "format": "uint64",
      "minimum": 0.0
    },
    "id": {
      "description": "id of this escrow",
      "type": "string"
    },
    "milestones": {
      "description": "List of milestones",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Milestone"
      }
    },
    "native_balance": {
      "description": "Balance in native tokens",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Coin"
      }
    },
    "recipient": {
      "description": "if approved, funds go to the recipient",
      "type": [
        "string",
        "null"
      ]
    },
    "source": {
      "description": "if refunded, funds go to the source",
      "type": "string"
    },
    "title": {
      "description": "Title of the escrow",
      "type": "string"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "Addr": {
      "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
      "type": "string"
    },
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Cw20Coin": {
      "type": "object",
      "required": [
        "address",
        "amount"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false
    },
    "Cw20CoinVerified": {
      "type": "object",
      "required": [
        "address",
        "amount"
      ],
      "properties": {
        "address": {
          "$ref": "#/definitions/Addr"
        },
        "amount": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false
    },
    "GenericBalance": {
      "type": "object",
      "required": [
        "cw20",
        "native"
      ],
      "properties": {
        "cw20": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Cw20CoinVerified"
          }
        },
        "native": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        }
      },
      "additionalProperties": false
    },
    "Milestone": {
      "type": "object",
      "required": [
        "amount",
        "description",
        "id",
        "is_completed",
        "title"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/GenericBalance"
        },
        "description": {
          "type": "string"
        },
        "end_height": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "end_time": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "id": {
          "type": "string"
        },
        "is_completed": {
          "type": "boolean"
        },
        "title": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
